// Code generated by protoc-gen-js-fetch.
// DO NOT EDIT!

import * as apipb_datasetmodels from "./datasetmodels.pb";

export type QuerySortSortOrder =  "ASC"  | "DSC" ;
export const QuerySortSortOrder_ASC: QuerySortSortOrder = "ASC";
export const QuerySortSortOrder_DSC: QuerySortSortOrder = "DSC";

export type AggregationAccumulator =  "NONE"  | "COUNT"  | "SUM"  | "MAX"  | "MIN"  | "AVG"  | "STD_SAMP"  | "STD_POP" ;
export const AggregationAccumulator_NONE: AggregationAccumulator = "NONE";
export const AggregationAccumulator_COUNT: AggregationAccumulator = "COUNT";
export const AggregationAccumulator_SUM: AggregationAccumulator = "SUM";
export const AggregationAccumulator_MAX: AggregationAccumulator = "MAX";
export const AggregationAccumulator_MIN: AggregationAccumulator = "MIN";
export const AggregationAccumulator_AVG: AggregationAccumulator = "AVG";
export const AggregationAccumulator_STD_SAMP: AggregationAccumulator = "STD_SAMP";
export const AggregationAccumulator_STD_POP: AggregationAccumulator = "STD_POP";

export type QueryGroupGroupType =  "Date"  | "Datetime"  | "TimeOfDay"  | "Discrete"  | "ContinuesInterval" ;
/**
Date gives rows each day of given timeRange
*/
export const QueryGroupGroupType_Date: QueryGroupGroupType = "Date";
/**
Datetime gives rows on given interval
*/
export const QueryGroupGroupType_Datetime: QueryGroupGroupType = "Datetime";
/**
TimeofDay gives rows on time of day. minutes and seconds on interval value determines interval.
ex: if minutes and seconds are false then rows will be 0,1,2,3,4
ex: if minutes is true then rows will be 00:00,00:01,00:02,...
when seconds is true than minutes is always true
*/
export const QueryGroupGroupType_TimeOfDay: QueryGroupGroupType = "TimeOfDay";
/**
Discrete should be used for String values
*/
export const QueryGroupGroupType_Discrete: QueryGroupGroupType = "Discrete";
/**
ContinuesInterval is for number values
*/
export const QueryGroupGroupType_ContinuesInterval: QueryGroupGroupType = "ContinuesInterval";

export type ActiveUsersRequestType =  "MONTLY"  | "DAILY"  | "NEW"  | "TOTAL" ;
export const ActiveUsersRequestType_MONTLY: ActiveUsersRequestType = "MONTLY";
export const ActiveUsersRequestType_DAILY: ActiveUsersRequestType = "DAILY";
export const ActiveUsersRequestType_NEW: ActiveUsersRequestType = "NEW";
export const ActiveUsersRequestType_TOTAL: ActiveUsersRequestType = "TOTAL";

export type RetentionRequestType =  "ONE"  | "SEVEN"  | "THIRTY" ;
export const RetentionRequestType_ONE: RetentionRequestType = "ONE";
export const RetentionRequestType_SEVEN: RetentionRequestType = "SEVEN";
export const RetentionRequestType_THIRTY: RetentionRequestType = "THIRTY";

export type GameInfoResponseFieldType =  "UNKNOWN"  | "STRING"  | "INTEGER"  | "FLOAT"  | "BOOL" ;
export const GameInfoResponseFieldType_UNKNOWN: GameInfoResponseFieldType = "UNKNOWN";
export const GameInfoResponseFieldType_STRING: GameInfoResponseFieldType = "STRING";
export const GameInfoResponseFieldType_INTEGER: GameInfoResponseFieldType = "INTEGER";
export const GameInfoResponseFieldType_FLOAT: GameInfoResponseFieldType = "FLOAT";
export const GameInfoResponseFieldType_BOOL: GameInfoResponseFieldType = "BOOL";

export interface TimeRange {
/**
From is the unix seconds time
*/
  from?: string|number;
/**
To is the unix seconds time
*/
  to?: string|number;
}

export interface ChildAndProfileIds {
/**
ChildId
*/
  childId?: string;
/**
ProfileId
*/
  profileId?: string;
}

export interface ChildAndTimeRange {
/**
ChildId
*/
  childId?: string;
/**
ProfileId
*/
  profileId?: string;
/**
Range is the time range
*/
  range?: TimeRange;
}

export interface GameWithVersions {
/**
GameId
*/
  gameId?: string;
/**
Versions
*/
  versions?: string[];
}

export interface PlayedGamesList {
  games?: GameWithVersions[];
/**
ChildId
*/
  childId?: string;
/**
Range is the time range
*/
  range?: TimeRange;
}

export interface QuerySort {
  fieldName?: string;
  order?: QuerySortSortOrder;
}

export interface Aggregation {
  fieldName?: string;
  outputField?: string;
  accumulator?: AggregationAccumulator;
}

export interface GroupInterval {
/**
For ContinuesInterval
*/
  int?: number;
/**
For ContinuesInterval
*/
  real?: number;
/**
For Datetime
*/
  days?: number;
/**
For Datetime
*/
  hours?: number;
/**
For TimeOfDay
*/
  minutes?: boolean;
/**
For TimeOfDay
*/
  seconds?: boolean;
}

export interface QueryGroup {
  fieldName?: string;
  type?: QueryGroupGroupType;
/**
Interval is optional for Date and Discrete type
*/
  interval?: GroupInterval;
  outputField?: string;
}

export interface Query {
  events?: string[];
  range?: TimeRange;
  sort?: QuerySort[];
  limit?: number;
  offset?: number;
  groupBy?: QueryGroup;
  aggregations?: Aggregation[];
  rawQueries?: string[];
}

export interface AnalyzeRequest {
/**
ChildId
*/
  childId?: string;
/**
ProfileId
*/
  profileId?: string;
/**
UseAppData changes data source
*/
  useAppData?: boolean;
/**
Query is calculation query
*/
  query?: Query;
/**
Games are the compute this request on
*/
  games?: GameWithVersions[];
}

export interface AnalyzeResult {
/**
Request
*/
  request?: AnalyzeRequest;
/**
Data
*/
  data?: apipb_datasetmodels.DataSet;
/**
Created At
*/
  createdAt?: string|number;
}

/**
Active Users
*/
export interface ActiveUsersRequest {
  type?: ActiveUsersRequestType;
  dates?: string[]|number[];
  appId?: string;
}

export interface ActiveUsersResult {
/**
Request
*/
  request?: ActiveUsersRequest;
/**
Data
*/
  data?: apipb_datasetmodels.DataSet;
/**
Created At
*/
  createdAt?: string|number;
}

/**
Retention
*/
export interface RetentionRequest {
  type?: RetentionRequestType;
  dates?: string[]|number[];
  appId?: string;
}

export interface RetentionResult {
/**
Request
*/
  request?: RetentionRequest;
/**
Data
*/
  data?: apipb_datasetmodels.DataSet;
/**
Created At
*/
  createdAt?: string|number;
}

export interface InactiveUsersRequest {
  appId?: string;
  inactiveDuring?: TimeRange;
  activeDuring?: TimeRange;
}

export interface GetActiveUsersRequest {
  appId?: string;
  period?: TimeRange;
}

export interface ActiveOnRangeRequest {
  range?: TimeRange;
  countryCodes?: string[];
  appIds?: string[];
}

export interface GameInfoResponse {
  gameId?: string;
  events?: GameInfoResponseEventInfo[];
}

export interface GameInfoResponseFieldInfo {
  name?: string;
  type?: GameInfoResponseFieldType;
}

export interface GameInfoResponseEventInfo {
  name?: string;
  fields?: GameInfoResponseFieldInfo[];
}

export interface AppDataInfoReq {
}

